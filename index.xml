<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>我应该没在扯淡</title><link>https://ixnik.github.io/blog/</link><description>Recent content on 我应该没在扯淡</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Thomas Wu 2020 ~ 2021</copyright><lastBuildDate>Fri, 21 Jan 2022 18:14:31 +0800</lastBuildDate><atom:link href="https://ixnik.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Haskell</title><link>https://ixnik.github.io/blog/posts/haskell/</link><pubDate>Fri, 21 Jan 2022 18:14:31 +0800</pubDate><guid>https://ixnik.github.io/blog/posts/haskell/</guid><description>我应该没在扯淡 https://ixnik.github.io/blog/posts/haskell/ -
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
&lt;code class="verbatim">&amp;lt;$&lt;/code>
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
第一次看到这个函数，是在 Emacs 的 Haskell-Mode 里面带的 repl 里。
看看他的签名:&lt;/p>
&lt;div class="src src-haskell">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="color:#008b45">λ&lt;/span>&amp;gt; &lt;span style="color:#00688b;font-weight:bold">:&lt;/span>info &amp;lt;$
&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Functor&lt;/span> &lt;span style="color:#8b008b">::&lt;/span> (* &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> *) &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Constraint&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Functor&lt;/span> f &lt;span style="color:#8b008b;font-weight:bold">where&lt;/span>
...
(&amp;lt;$) &lt;span style="color:#8b008b">::&lt;/span> a &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> f b &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> f a
&lt;span style="color:#228b22">-- Defined in ‘GHC.Base’&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">infixl&lt;/span> &lt;span style="color:#b452cd">4&lt;/span> &amp;lt;$&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
看到这个中缀函数，想到 &lt;code class="verbatim">&amp;lt;$&amp;gt;&lt;/code> 。记得这是 Applicative 里实现的，看看。&lt;/p>
&lt;div class="src src-haskell">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="color:#008b45">λ&lt;/span>&amp;gt; &lt;span style="color:#00688b;font-weight:bold">:&lt;/span>info &amp;lt;$&amp;gt;
(&amp;lt;$&amp;gt;) &lt;span style="color:#8b008b">::&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Functor&lt;/span> f &lt;span style="color:#8b008b">=&amp;gt;&lt;/span> (a &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> b) &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> f a &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> f b
&lt;span style="color:#228b22">-- Defined in ‘Data.Functor’&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">infixl&lt;/span> &lt;span style="color:#b452cd">4&lt;/span> &amp;lt;$&amp;gt;&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
嗯，发现了一点，其实 &lt;code class="verbatim">&amp;lt;$&lt;/code> 的签名也可以写成这样的形式：&lt;/p>
&lt;div class="src src-haskell">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell">(&amp;lt;$) &lt;span style="color:#8b008b">::&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Functor&lt;/span> f &lt;span style="color:#8b008b">=&amp;gt;&lt;/span> a &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> f b &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> f a&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
Wow，这下大家都知道了。&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Monad
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;div class="src src-haskell">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Monad&lt;/span> &lt;span style="color:#8b008b">::&lt;/span> (* &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> *) &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Constraint&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Applicative&lt;/span> m &lt;span style="color:#8b008b">=&amp;gt;&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Monad&lt;/span> m &lt;span style="color:#8b008b;font-weight:bold">where&lt;/span>
(&amp;gt;&amp;gt;=) &lt;span style="color:#8b008b">::&lt;/span> m a &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> (a &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> m b) &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> m b
(&amp;gt;&amp;gt;) &lt;span style="color:#8b008b">::&lt;/span> m a &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> m b &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> m b
return &lt;span style="color:#8b008b">::&lt;/span> a &lt;span style="color:#8b008b">-&amp;gt;&lt;/span> m a
&lt;span style="color:#228b22">{-# MINIMAL (&amp;gt;&amp;gt;=) #-}&lt;/span>
&lt;span style="color:#228b22">-- Defined in ‘GHC.Base’&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">instance&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Monad&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">Either&lt;/span> e) &lt;span style="color:#228b22">-- Defined in ‘Data.Either’&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">instance&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Monad&lt;/span> &lt;span style="color:#00688b;font-weight:bold">[]&lt;/span> &lt;span style="color:#228b22">-- Defined in ‘GHC.Base’&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">instance&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Monad&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Maybe&lt;/span> &lt;span style="color:#228b22">-- Defined in ‘GHC.Base’&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">instance&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Monad&lt;/span> &lt;span style="color:#00688b;font-weight:bold">IO&lt;/span> &lt;span style="color:#228b22">-- Defined in ‘GHC.Base’&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">instance&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Monad&lt;/span> ((&lt;span style="color:#8b008b">-&amp;gt;&lt;/span>) r) &lt;span style="color:#228b22">-- Defined in ‘GHC.Base’&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">instance&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">Monoid&lt;/span> a, &lt;span style="color:#00688b;font-weight:bold">Monoid&lt;/span> b, &lt;span style="color:#00688b;font-weight:bold">Monoid&lt;/span> c) &lt;span style="color:#8b008b">=&amp;gt;&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Monad&lt;/span> ((,,,) a b c)
&lt;span style="color:#228b22">-- Defined in ‘GHC.Base’&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">instance&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">Monoid&lt;/span> a, &lt;span style="color:#00688b;font-weight:bold">Monoid&lt;/span> b) &lt;span style="color:#8b008b">=&amp;gt;&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Monad&lt;/span> ((,,) a b)
&lt;span style="color:#228b22">-- Defined in ‘GHC.Base’&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">instance&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Monoid&lt;/span> a &lt;span style="color:#8b008b">=&amp;gt;&lt;/span> &lt;span style="color:#00688b;font-weight:bold">Monad&lt;/span> ((,) a) &lt;span style="color:#228b22">-- Defined in ‘GHC.Base’&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
- https://ixnik.github.io/blog/posts/haskell/ - Thomas Wu 2020 ~ 2021</description></item><item><title>Emacs/Elisp Tips</title><link>https://ixnik.github.io/blog/posts/elisp-tips/</link><pubDate>Sun, 05 Sep 2021 18:34:30 +0800</pubDate><guid>https://ixnik.github.io/blog/posts/elisp-tips/</guid><description>我应该没在扯淡 https://ixnik.github.io/blog/posts/elisp-tips/ -
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
NS-system-appearance
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
&lt;code class="verbatim">ns-system-appearance&lt;/code> 这个变量可以用来判断 macOS 系统的主题 (light/dark) 。&lt;/p>
&lt;p>
当然，这个变量的前提是 macOS 系统的版本 &amp;gt;= 10.14，也就是 Mojave 后面的 macOS 系统都可以使用。&lt;/p>
&lt;p>
这里翻译一下 Emacs 的文档：这个变量在 macOS &amp;lt; 10.14 和 GNUstep 上会被忽略掉，它的缺省（即默认值）是 &lt;code class="verbatim">nil&lt;/code> 。&lt;/p>
&lt;p>
用法例子：&lt;/p>
&lt;div class="src src-elisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-elisp" data-lang="elisp">(&lt;span style="color:#658b00">if&lt;/span> (&lt;span style="color:#658b00">or&lt;/span> (&lt;span style="color:#00688b">string=&lt;/span> &lt;span style="color:#00688b">ns-system-appearance&lt;/span> &lt;span style="color:#cd5555">&amp;#34;dark&amp;#34;&lt;/span>) (&lt;span style="color:#00688b">not&lt;/span> (&lt;span style="color:#00688b">display-graphic-p&lt;/span>)))
(&lt;span style="color:#00688b">load-theme&lt;/span> &lt;span style="color:#cd5555">&amp;#39;doom-material&lt;/span>)
(&lt;span style="color:#00688b">load-theme&lt;/span> &lt;span style="color:#cd5555">&amp;#39;leuven&lt;/span>))&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;pre class="example">
t
&lt;/pre>
&lt;p>
但是，这个东西是 &lt;code class="verbatim">emacs-plus&lt;/code> 通过一个 patch 引入的，所以。&lt;/p>
&lt;div class="src src-haskell">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="color:#8b008b;font-weight:bold">where&lt;/span> emacs-plus &lt;span style="color:#8b008b">=&lt;/span> search &lt;span style="color:#cd5555">&amp;#34;https://github.com/&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
El-doc
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>
在写 elisp 的时候， &lt;code class="verbatim">mini-buffer&lt;/code> 出现的提示性文档叫做 &amp;#34;el-doc&amp;#34;，可以通过 &lt;code class="verbatim">M-x el-doc-mode&lt;/code> 来开启。&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-2">
&lt;h2 id="headline-3">
White-space-cleanup
&lt;/h2>
&lt;div id="outline-text-headline-3" class="outline-text-2">
&lt;p>
&lt;code class="verbatim">M-x whi-c&lt;/code> （即 white-space-cleanup）可以处理掉文档的空白部分。&lt;/p>
&lt;/div>
&lt;/div>
- https://ixnik.github.io/blog/posts/elisp-tips/ - Thomas Wu 2020 ~ 2021</description></item><item><title>Emacs Lisp 学习笔记</title><link>https://ixnik.github.io/blog/posts/elisp/</link><pubDate>Mon, 23 Aug 2021 12:59:00 +0800</pubDate><guid>https://ixnik.github.io/blog/posts/elisp/</guid><description>我应该没在扯淡 https://ixnik.github.io/blog/posts/elisp/ -
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Intro
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>我已经断断续续地使用 Emacs Lisp 来写一些配置，或者是工具一段时间了。&lt;/p>
&lt;p>
然而，我出来没有系统、完整地去学习和了解 Emacs Lisp ，只是凭着自己使用 Common Lisp 的习惯
和记忆来 “想当然” 式地编写 Emacs Lisp 程序。&lt;/p>
&lt;p>
随着使用 Emacs 的时间越来越长，我越发地觉得 Emacs Lisp 在 Emacs 使用中扮演着多么重要的角色，
下定决心去学习它，便有了本文。&lt;/p>
&lt;p>
我也希望能用 Lisp 写一些插件。至于学习这门古老的语言的有没有用，我想自然不用多说了。就算是单纯在使用 Emacs 的角度讲，我同样认为不用担心它会被替代，毕竟它发展这么多年了，
而且现在 “Native-comp”&lt;sup class="footnote-reference">&lt;a id="footnote-reference-1" href="#footnote-1">1&lt;/a>&lt;/sup> 的分支被合并到主线了，Emacs Lisp 的性能又一次加强了。&lt;/p>
&lt;p>
这样 Elisp 的性能也提高了。不用担心自己的配置，或者是插件在 Emacs 的某一次更新之后过时。&lt;/p>
&lt;p>
Emacs 自己就带有 Elisp 文档， &lt;code class="verbatim">C-h i&lt;/code> 就有非常详细的介绍和文档。&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(&lt;span style="color:#00688b">info&lt;/span> &lt;span style="color:#cd5555">&amp;#34;elisp&amp;#34;&lt;/span>) &lt;span style="color:#228b22">;; You can also do it by this.&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
以上的代码片段在 Emacs 下可以通过 &lt;code class="verbatim">C-c C-c&lt;/code> 直接运行。&lt;/p>
&lt;p>
你也可以 &lt;code class="verbatim">C-x C-b&lt;/code> 找到 &lt;code class="verbatim">*scratch*&lt;/code> 然后输入以上的 lisp 代码，找到官方的简短教程以及说明书 （reference）。&lt;/p>
&lt;p>
这篇文档是根据李杀的 Emacs Lisp 教程来的。&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="footnotes">
&lt;hr class="footnotes-separatator">
&lt;div class="footnote-definitions">
&lt;div class="footnote-definition">
&lt;sup id="footnote-1">&lt;a href="#footnote-reference-1">1&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;p>See &lt;a href="https://emacs-china.org">Emacs China&lt;/a>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
- https://ixnik.github.io/blog/posts/elisp/ - Thomas Wu 2020 ~ 2021</description></item></channel></rss>