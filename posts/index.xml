<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 我应该没在扯淡</title><link>https://ixnik.github.io/blog/posts/</link><description>Recent content in Posts on 我应该没在扯淡</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Thomas Wu 2020 ~ 2021</copyright><lastBuildDate>Fri, 21 Jan 2022 18:14:31 +0800</lastBuildDate><atom:link href="https://ixnik.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Haskell</title><link>https://ixnik.github.io/blog/posts/haskell/</link><pubDate>Fri, 21 Jan 2022 18:14:31 +0800</pubDate><guid>https://ixnik.github.io/blog/posts/haskell/</guid><description>&amp;lt;$ 第一次看到这个函数，是在 Emacs 的 Haskell-Mode 里面带的 repl 里。 看看他的签名:
λ&amp;gt; :info &amp;lt;$ type Functor :: (* -&amp;gt; *) -&amp;gt; Constraint class Functor f where ... (&amp;lt;$) :: a -&amp;gt; f b -&amp;gt; f a -- Defined in ‘GHC.Base’ infixl 4 &amp;lt;$ 看到这个中缀函数，想到 &amp;lt;$&amp;gt; 。记得这是 Applicative 里实现的，看看。
λ&amp;gt; :info &amp;lt;$&amp;gt; (&amp;lt;$&amp;gt;) :: Functor f =&amp;gt; (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b -- Defined in ‘Data.</description></item><item><title>Emacs/Elisp Tips</title><link>https://ixnik.github.io/blog/posts/elisp-tips/</link><pubDate>Sun, 05 Sep 2021 18:34:30 +0800</pubDate><guid>https://ixnik.github.io/blog/posts/elisp-tips/</guid><description>NS-system-appearance ns-system-appearance 这个变量可以用来判断 macOS 系统的主题 (light/dark) 。
当然，这个变量的前提是 macOS 系统的版本 &amp;gt;= 10.14，也就是 Mojave 后面的 macOS 系统都可以使用。
这里翻译一下 Emacs 的文档：这个变量在 macOS &amp;lt; 10.14 和 GNUstep 上会被忽略掉，它的缺省（即默认值）是 nil 。
用法例子：
(if (or (string= ns-system-appearance &amp;#34;dark&amp;#34;) (not (display-graphic-p))) (load-theme &amp;#39;doom-material) (load-theme &amp;#39;leuven)) t 但是，这个东西是 emacs-plus 通过一个 patch 引入的，所以。
where emacs-plus = search &amp;#34;https://github.com/&amp;#34; El-doc 在写 elisp 的时候， mini-buffer 出现的提示性文档叫做 &amp;#34;el-doc&amp;#34;，可以通过 M-x el-doc-mode 来开启。</description></item><item><title>Emacs Lisp 学习笔记</title><link>https://ixnik.github.io/blog/posts/elisp/</link><pubDate>Mon, 23 Aug 2021 12:59:00 +0800</pubDate><guid>https://ixnik.github.io/blog/posts/elisp/</guid><description>Intro 我已经断断续续地使用 Emacs Lisp 来写一些配置，或者是工具一段时间了。
然而，我出来没有系统、完整地去学习和了解 Emacs Lisp ，只是凭着自己使用 Common Lisp 的习惯 和记忆来 “想当然” 式地编写 Emacs Lisp 程序。
随着使用 Emacs 的时间越来越长，我越发地觉得 Emacs Lisp 在 Emacs 使用中扮演着多么重要的角色， 下定决心去学习它，便有了本文。
我也希望能用 Lisp 写一些插件。至于学习这门古老的语言的有没有用，我想自然不用多说了。就算是单纯在使用 Emacs 的角度讲，我同样认为不用担心它会被替代，毕竟它发展这么多年了， 而且现在 “Native-comp”1 的分支被合并到主线了，Emacs Lisp 的性能又一次加强了。
这样 Elisp 的性能也提高了。不用担心自己的配置，或者是插件在 Emacs 的某一次更新之后过时。
Emacs 自己就带有 Elisp 文档， C-h i 就有非常详细的介绍和文档。
(info &amp;#34;elisp&amp;#34;) ;; You can also do it by this. 以上的代码片段在 Emacs 下可以通过 C-c C-c 直接运行。</description></item></channel></rss>